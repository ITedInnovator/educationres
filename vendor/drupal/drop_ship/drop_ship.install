<?php

function drop_ship_kw_manifests_info() {
  return array(
    'update_db' => array(
      'callback' => 'drop_ship_update_db',
    ),
    'apply_module_dependencies' => array(
      'callback' => 'drop_ship_apply_module_dependencies',
      'callback arguments' => explode(':', (getenv('DROPSHIP_SEEDS') ?: 'drop_ship')),
      'dependencies' => array(
        array(
          'module' => 'drop_ship',
          'name' => 'update_db'
        )
      )
    ),
    'features_revert' => array(
      'callback' => 'drop_ship_features_revert',
      'dependencies' => array(
        array(
          'module' => 'drop_ship',
          'name' => 'apply_module_dependencies'
        ),
        array(
          'module' => 'drop_ship',
          'name' => 'update_db'
        )
      )
    ),
    'views_revert' => array(
      'callback' => 'drop_ship_views_revert',
      'dependencies' => array(
        array(
          'module' => 'drop_ship',
          'name' => 'features_revert',
        ),
      ),
    ),
  );
}

function drop_ship_views_revert() {
  module_load_include('inc', 'views', 'drush/views.drush');
  views_revert_allviews(views_get_all_views(TRUE));
}

function drop_ship_features_revert() {
  module_load_include('inc', 'features', 'features.export');
  features_include();

  $revertable_states = array(
    FEATURES_OVERRIDDEN, FEATURES_NEEDS_REVIEW, FEATURES_REBUILDABLE
  );
  $modules = array();
  foreach (features_get_features(NULL, TRUE) as $module) {
    if ($module->status && in_array($module->status, $revertable_states)) {
      $modules[] = $module->name;
    }
  }
  if ($modules) {
    foreach ($modules as $module) {
      if (($feature = features_load_feature($module, TRUE)) && module_exists($module)) {
        $components = array();
        $states = features_get_component_states(array($feature->name), FALSE);
        foreach ($states[$feature->name] as $component => $state) {
          if (in_array($state, $revertable_states) && features_hook($component, 'features_revert')) {
            $components[] = $component;
          }
        }
        foreach ($components as $component) {
          features_revert(array($module => array($component)));
        }
      }
    }
  }
}

function drop_ship_apply_module_dependencies() {
  $seeds = func_get_args();
  $files = system_rebuild_module_data();
  $profile = drupal_get_profile();
  // To find the required modules we need to clear the required flag on the
  // profile, because otherwise all modules that need to be enabled are called
  // required. Required is reserved for base modules for Drupal.
  $files[$profile]->info['required'] = FALSE;

  // Find the 'required' modules
  // Noteworthy fact when debugging: the field module marks modules that are
  // used by existing fields as 'required'.
  $required = array();
  foreach ($files as $name => $info) {
    if (!empty($info->info['required']) && !isset($required[$name])) {
      $required[$name] = $info->sort;
      if (!empty($info->requires)) {
        foreach (array_keys($info->requires) as $dependency) {
          if (!isset($required[$dependency])) {
            if (!isset($files[$dependency])) {
              return drush_set_error(dt('Dependency !dependency of required module !module does not exist.', array('!module' => $name, '!dependency' => $dependency)));
            }
            $required[$dependency] = $files[$dependency]->sort;
          }
        }
      }
    }
  }
  arsort($required);

  $dependencies = array();
  foreach ($seeds as $seed) {
    foreach (array_keys($files[$seed]->requires) as $dependency) {
      if (!isset($files[$dependency])) {
        return drush_set_error(dt(
          'Dependency !dependency of !seed does not exist.',
          array('!dependency' => $dependency, '!seed' => $seed)
        ));
      }
      $dependencies[$dependency] = $files[$dependency]->sort;
    }
  }
  arsort($dependencies);

  // Enable the required modules and dependencies.
  $expected = array_merge(array_keys($required), array_keys($dependencies), $seeds);
  $result = module_enable($expected);
  module_implements('', FALSE, TRUE);
  if (!$result) {
    return drush_set_error(dt('An unexpected error occured while trying to enable modules !modules', array('!modules', implode(', ', $expected))));
  }

  // Check for enabled modules that are not expected to be enabled.
  $unexpected = array();
  foreach (module_list(TRUE) as $module) {
    if (!in_array($module, $expected) && $module != $profile) {
      if (!isset($files[$module])) {
        drush_log(dt('Could not find dependencies for currently enabled module !module.', array('!module' => $module)), 'error');
      }
      $unexpected[$module] = $files[$module]->sort;
    }
  }
  asort($unexpected);
  $unexpected = array_keys($unexpected);

  // Disable the unexpected modules.
  if ($unexpected) {
    module_disable($unexpected);
  }

  // Check for modules that are still installed even though they are not
  // expected.
  $orphan_installs = array();
  include_once DRUPAL_ROOT . '/includes/install.inc';
  foreach ($files as $name => $info) {
    if ($name != $profile && !in_array($name, $expected)) {
      if (drupal_get_installed_schema_version($name) != SCHEMA_UNINSTALLED) {
        $orphan_installs[$name] = $info->sort;
      }
    }
  }
  asort($orphan_installs);
  $orphan_installs = array_keys($orphan_installs);

  // Remove the hanging installs.
  if ($orphan_installs) {
    $result = drupal_uninstall_modules($orphan_installs, FALSE);
    if (!$result) {
      return drush_set_error(dt('An unexpected error occured while trying to uninstall modules !modules', array('!modules', implode(', ', $orphan_installs))));
    }
  }
  drush_log(dt('Finished enabling required modules and uninstalling orphan modules.'), 'ok');
}

function drop_ship_update_db() {
  drush_set_context('DRUSH_AFFIRMATIVE', TRUE);
  drush_invoke('updatedb');
}
